@namespace ThreeP.Modules.Items
@page "/equipment"
@inject ItemsService ItemsService
@inject SetService SetService
@inject ShowResultService ShowResultService
@attribute [Authorize]

<MudGrid>
    <MudItem xs="12">
        <ItemUpdate Item="item" ItemChanged="UpdateItem"/>
    </MudItem>
    <MudItem md="6">
        <ItemsGrid Items="Items" OnEdit="EditItem" OnDelete="DeleteItem" OnSetCreating="UpdateSet"/>
    </MudItem>
    <MudItem md="6">
        <SetsGrid Sets="Sets" OnEdit="EditSet" OnDelete="DeleteSet"/>
    </MudItem>
</MudGrid>


@code {
    [CascadingParameter] public AppState AppState { get; set; }
    [PersistentState] public List<Item>? Items { get; set; }
    [PersistentState] public List<Set>? Sets { get; set; } = [];
    Item? item;
    Guid userId => AppState.UserId;


    protected override async Task OnInitializedAsync()
    {
        await GetItems();
        await GetSets();
    }


// ITEMS
    // async Task GetItems() => Items = await ItemsService.Get([x => x.Sets], filters: [x => x.UserId == userId]);
    async Task GetItems() => Items = await ItemsService.Get(filters: [x => x.UserId == userId]);


    async Task EditItem(Item arg) => item = arg;


    async Task UpdateItem((Item? item, bool isNew) arg)
    {
        item = arg.item;
        item.UserId = userId;
        var result = await ItemsService.UpsertItem(item);
        ShowResultService.ShowResultMessage(result);
        await GetItems();
    }


    async Task DeleteItem(Guid? id)
    {
        var result = await ItemsService.Delete(id);
        ShowResultService.ShowResultMessage(result);
        await GetItems();
    }


    // SETS
    // async Task GetSets() => Sets = await SetService.Get([x=>x.Items],[x => x.UserId == userId]);
    async Task GetSets() => Sets = await SetService.Get([x=>x.Items],filters:[x => x.UserId == userId]);


    // async Task UpdateSet((Set? set, bool isNew) arg)
    async Task UpdateSet(Set? arg)
    {
        arg.UserId = userId;
        var result = await SetService.UpdateSet(arg);
        ShowResultService.ShowResultMessage(result);
        await GetSets();
    }


    async Task EditSet(Set? arg)
    {
        var result = await SetService.UpdateSet(arg);
        ShowResultService.ShowResultMessage(result);
        await GetSets();
    }


    async Task DeleteSet(Guid? id)
    {
        var result = await SetService.Delete(id);
        ShowResultService.ShowResultMessage(result);
        await GetSets();
    }
}