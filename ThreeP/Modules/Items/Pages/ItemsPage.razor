@namespace ThreeP.Modules.Items
@page "/equipment"
@inject ItemsService ItemsService
@inject SetService SetService
@inject ShowResultService ShowResultService
@attribute [Authorize]

@* <ItemUpdate Item="item" ItemChanged="UpdateItem"/> *@
@* <MVerticalSpacer/> *@
<Update T="Item" Titem="titem" ItemChanged="(arg)=>UpdateItem(arg)">
    <MudTextField @bind-Value="@context?.Name" Label="Nazwa" Variant="Variant.Outlined" Required Clearable/>
    <MudTextField @bind-Value="@context?.Description" Label="Opis" Variant="Variant.Outlined" Lines="3" Clearable/>
    <MudNumericField @bind-Value="@context?.Weight" Label="Waga" Variant="Variant.Outlined" AdornmentText="Kg"
                     Clearable/>
</Update>

<MVerticalSpacer/>

<MudGrid>
    @* ITEMS *@
    <MudItem md="6">
        <ItemsGrid Items="Items" @bind-SelectedItems="selectedItems" EditedSet="@editedSet" OnEdit="EditItem"
                   OnDelete="DeleteItem" OnSetCreating="UpdateSet" OnReload="GetItems"/>
        @* <ItemsGrid Items="Items" @bind-SelectedItems="selectedItems" SetName="@setName" EditetedSet="@editedSet" OnEdit="EditItem" OnDelete="DeleteItem" OnSetCreating="UpdateSet" OnReload="GetItems"/> *@
    </MudItem>
    @* SETS *@
    <MudItem md="6">
        <SetsGrid Sets="Sets" OnEdit="EditSet" OnDelete="DeleteSet"/>
    </MudItem>
</MudGrid>


@code {
    [CascadingParameter] public AppState AppState { get; set; }
    Guid userId => AppState.UserId;
    [PersistentState] public List<Item>? Items { get; set; }
    [PersistentState] public List<Set>? Sets { get; set; } = [];
    (Item? item, bool isNew)titem;
    HashSet<Item> selectedItems = [];
    string? setName;
    Set? editedSet;


    protected override async Task OnInitializedAsync()
    {
        await GetItems();
        await GetSets();
    }


// ITEMS
    // async Task GetItems() => Items = await ItemsService.Get([x => x.Sets], filters: [x => x.UserId == userId]);
    async Task GetItems() => Items = await ItemsService.Get(filters: [x => x.UserId == userId]);


    async Task EditItem((Item? item,bool isNew) arg) => titem = arg;


    async Task UpdateItem((Item? item, bool isNew) arg)
    {
        if (arg.item is null)return;
        titem = arg;
        titem.item.UserId = userId;
        var result = await ItemsService.UpsertItem(titem.item);
        ShowResultService.ShowResultMessage(result);
        await GetItems();
        if (result.IsSuccess) titem = default;
    }


    async Task DeleteItem(Guid? id)
    {
        var result = await ItemsService.Delete(id);
        ShowResultService.ShowResultMessage(result);
        await GetItems();
    }


    // SETS
    // async Task GetSets() => Sets = await SetService.Get([x=>x.Items],[x => x.UserId == userId]);
    async Task GetSets() => Sets = await SetService.Get([x => x.Items], filters: [x => x.UserId == userId]);


    // async Task UpdateSet((Set? set, bool isNew) arg)
    async Task UpdateSet(Set? arg)
    {
        arg.UserId = userId;
        var result = await SetService.UpdateSet(arg);
        ShowResultService.ShowResultMessage(result);
        if (result.IsSuccess)
        {
            editedSet = null;
            selectedItems = [];
        }
        
        await GetSets();
    }


    async Task EditSet(Set? arg)
    {
        var ids = arg.Items.Select(x => x.Id).ToHashSet() ?? [];
        selectedItems = Items.Where(x => ids.Contains(x.Id)).ToHashSet() ?? [];
        editedSet = arg;
        // setName=arg.Name;
        // selectedItems = arg.Items != null ? arg.Items.ToHashSet() : [];
        // StateHasChanged();


        // var result = await SetService.UpdateSet(arg);
        // arg.Items = selectedItems;
        /*var result = await SetService.UpdateSet(arg);
        ShowResultService.ShowResultMessage(result);
        await GetSets();
    */
        // await UpdateSet(arg);
    }


    async Task DeleteSet(Guid? id)
    {
        var result = await SetService.Delete(id);
        ShowResultService.ShowResultMessage(result);
        await GetSets();
    }
}