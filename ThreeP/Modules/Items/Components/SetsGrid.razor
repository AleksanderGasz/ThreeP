@namespace ThreeP.Modules.Items
@inject IDialogService DialogService

@if (!Sets.Any())
{
    <NoData/>
}
else
{
    <MudDataGrid Items="Sets" Elevation="GlobalStyles.Elevation">
        <ToolBarContent>
            <MudText Color="Color.Warning">Sety</MudText>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Set"/>
            <PropertyColumn Property="x => x.Name" Title="Nazwa"/>
            <PropertyColumn Property="x => x.Description" Title="Opis"/>
            <PropertyColumn Property="x => x.Weight" Title="Waga"/>
            <TemplateColumn StickyRight Title="Akcje" CellClass="d-flex justify-center" CellStyle="width:120px;"
                            HeaderStyle="width:120px; ">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small"
                                   OnClick="@(e => Edit(context))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                   OnClick="@(e => Delete(context))"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudSimpleTable Elevation="GlobalStyles.Elevation" Hover Dense Style="overflow-x: auto;">
                <thead>
                <tr>
                    <th>Nazwa</th>
                    <th>Opis</th>
                    <th>Waga</th>
                </tr>
                </thead>
                <tbody>
                @if (context.Item?.Items.Any() == true)
                {
                    foreach (var item in context.Item?.Items)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Description</td>
                            <td>@item.Weight</td>
                        </tr>
                    }
                }
                </tbody>
            </MudSimpleTable>
        </ChildRowContent>

    </MudDataGrid>
}

@code {
    [Parameter] public HashSet<Set>? Sets { get; set; }

    [Parameter] public EventCallback<Set> OnEdit { get; set; }
    [Parameter] public EventCallback<Guid?> OnDelete { get; set; }


    async Task Edit(CellContext<Set?> context)
    {
        await OnEdit.InvokeAsync(context.Item);
    }


    async Task Delete(CellContext<Set?> context)
    {
        var result = await DialogService.ShowMessageBox("Uwaga!", "Czy na pewno chcesz skasować?", yesText: "Usuń!", cancelText: "Anuluj");
        if (result == true) await OnDelete.InvokeAsync(context.Item.Id);
    }
}}