@namespace ThreeP.Modules.Items
@inject IDialogService DialogService

@if (Items?.Any() == false)
{
    <NoData/>
}
else
{
    <MudDataGrid Items="Items" Elevation="GlobalStyles.Elevation" MultiSelection @bind-SelectedItems="selectedItems" >
        <ToolBarContent>
            @* <MudText Color="Color.Warning">Przedmioty</MudText> *@
            <MTitle Name="Wyposażenie"/>
            <MudSpacer/>
            <MudForm @ref="@setForm">
                <MudStack Row>
                    <MudTextField Disabled="addSetDisabled.Value" @bind-Value="setName" Variant="Variant.Text"
                                  Placeholder="Nazwa Setu" Class="me-2" Required Immediate/>
                    <MudButton Disabled="@(addSetDisabled.Value || !setForm.IsValid)" Variant="Variant.Filled"
                               Color="Color.Info"
                               Size="Size.Small"
                               OnClick="AddSet">Dodaj Set
                    </MudButton>
                </MudStack>
            </MudForm>
        </ToolBarContent>
        <Columns>
            @* <HierarchyColumn T="Item"/> *@
            <SelectColumn T="Item"/>
            <PropertyColumn Property="x => x.Name" Title="Nazwa"/>
            <PropertyColumn Property="x => x.Description" Title="Opis"/>
            <PropertyColumn Property="x => x.Weight" Title="Waga"/>

            @* ACTIONS *@
            <TemplateColumn StickyRight Title="Akcje" 
                            HeaderClass="d-flex justify-center" HeaderStyle="width:120px; "
                            CellStyle="width:120px; text-align:center; ">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small"
                                   OnClick="@(e => Edit(context))" Class="me-3"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                   OnClick="@(e => Delete(context))"/>
                </CellTemplate>
            </TemplateColumn>

        </Columns>

    </MudDataGrid>
}

@code {
    [Parameter] public EventCallback<Item> OnEdit { get; set; }
    [Parameter] public EventCallback<Guid?> OnDelete { get; set; }
    [Parameter] public EventCallback<Set> OnSetCreating { get; set; }
    [Parameter] public List<Item>? Items { get; set; }

    HashSet<Item>? selectedItems = [];
    bool? addSetDisabled => selectedItems?.Any() != true;

    MudForm? setForm;
    string? setName;


    async Task Edit(CellContext<Item?> context)
    {
        await OnEdit.InvokeAsync(context.Item);
    }


    async Task Delete(CellContext<Item?> context)
    {
        var result = await DialogService.ShowMessageBox("Uwaga!", "Czy na pewno chcesz skasować?", yesText: "Usuń!", cancelText: "Anuluj");
        if (result == true) await OnDelete.InvokeAsync(context.Item.Id);
    }


    async Task AddSet()
    {
        if (setForm.IsValid)
        {
            var weight = selectedItems?.Sum(x => x.Weight) ?? 0;
            var set = new Set
            {
                Name = setName,
                Description = "",
                Weight = weight,
                Items = selectedItems
            };
            await OnSetCreating.InvokeAsync(set);
            setName = string.Empty;
            selectedItems.Clear();
        }
    }


    // void Refresh() => StateHasChanged();
}