@namespace ThreeP.Modules.Items
@inject IDialogService DialogService
@inject ShowResultService ShowResultService
@inject ImportExportService<ItemDto> ImportExportService
@inject ItemsService ItemsService


@if (Items?.Any() == false)
{
    <NoData/>
}
else
{
    <MudDataGrid Items="Items" Elevation="GlobalStyles.Elevation" MultiSelection @bind-SelectedItems="SelectedItems">
        <ToolBarContent>
            @* <MudText Color="Color.Warning">Przedmioty</MudText> *@
            <MTitle Name="Wyposażenie"/>
            <MudSpacer/>
            <MudForm @ref="@setForm">
                <MudStack Row Class="me-8">
                    <MudTextField Disabled="addSetDisabled.Value" @bind-Value="setName" Variant="Variant.Text"
                                  Placeholder="Nazwa Setu" Class="me-2" Required Immediate/>
                    @*
                    <MudButton Disabled="@(addSetDisabled.Value || !setForm.IsValid)" Variant="Variant.Filled"
                               Color="Color.Info"
                               Size="Size.Small"
                               OnClick="AddSet">Dodaj Set
                    </MudButton>
                    *@
                    <MudButton Disabled="@(addSetDisabled.Value)" Variant="Variant.Filled"
                               Color="Color.Info"
                               Size="Size.Small"
                               OnClick="AddSet">Dodaj Set
                    </MudButton>
                </MudStack>
            </MudForm>
            <MudStack Row Spacing="2">
                <MudIconButton Disabled="!Items.Any()" Icon="@Icons.Material.Filled.FileDownload" aria-label="Import"
                               Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="Import">Import
                </MudIconButton>
                <MudIconButton Disabled="!SelectedItems.Any()" Icon="@Icons.Material.Filled.FileUpload"
                               aria-label="Export"
                               Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick="Export">Export
                </MudIconButton>
            </MudStack>

        </ToolBarContent>
        <Columns>
            @* <HierarchyColumn T="Item"/> *@
            <SelectColumn T="Item"/>
            <PropertyColumn Property="x => x.Name" Title="Nazwa"/>
            <PropertyColumn Property="x => x.Description" Title="Opis"/>
            <PropertyColumn Property="x => x.Weight" Title="Waga"/>

            @* ACTIONS *@
            <TemplateColumn StickyRight Title="Akcje"
                            HeaderClass="d-flex justify-center" HeaderStyle="width:120px; "
                            CellStyle="width:120px; text-align:center; ">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small"
                                   OnClick="@(e => Edit(context))" Class="me-3"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                   OnClick="@(e => Delete(context))"/>
                </CellTemplate>
            </TemplateColumn>

        </Columns>

    </MudDataGrid>
}

@code {
    [Parameter] public EventCallback<Item> OnEdit { get; set; }
    [Parameter] public EventCallback<Guid?> OnDelete { get; set; }
    [Parameter] public EventCallback<Set> OnSetCreating { get; set; }
    [Parameter] public EventCallback OnReload { get; set; }
    [Parameter] public EventCallback<HashSet<Item>> SelectedItemsChanged { get; set; }
    [Parameter] public HashSet<Item>? SelectedItems { get; set; }
    [Parameter] public List<Item>? Items { get; set; }

    // HashSet<Item>? selectedItems = [];
    // bool? addSetDisabled => selectedItems?.Any() != true;
    // bool? addSetDisabled => SelectedItems?.Any() != true;
    bool? addSetDisabled =>false;

    MudForm? setForm;
    string? setName;


    async Task Edit(CellContext<Item?> context)
    {
        await OnEdit.InvokeAsync(context.Item);
    }


    async Task Delete(CellContext<Item?> context)
    {
        var result = await DialogService.ShowMessageBox("Uwaga!", "Czy na pewno chcesz skasować?", yesText: "Usuń!", cancelText: "Anuluj");
        if (result == true) await OnDelete.InvokeAsync(context.Item.Id);
    }


    async Task AddSet()
    {
        if (setForm.IsValid)
        {
            var weight = SelectedItems?.Sum(x => x.Weight) ?? 0;
            var set = new Set
            {
                Name = setName,
                Description = "",
                Weight = weight,
                Items = SelectedItems
            };
            await OnSetCreating.InvokeAsync(set);
            setName = string.Empty;
            SelectedItems.Clear();
        }
    }


    async Task Export()
    {
        var dtos = new HashSet<ItemDto>();
        foreach (var selectedItem in SelectedItems) dtos.Add(Item.ToDto(selectedItem));

        var result = await ImportExportService.Export(dtos);
        ShowResultService.ShowResultMessage(result);
    }


    async Task Import()
    {
        var result = await ImportExportService.Import();
        ShowResultService.ShowResultMessage(result.ToResult());
        if (result.IsSuccess)
        {
            foreach (var dto in result.Value)
            {
                dto.Id = Guid.CreateVersion7();
                var importResult = await ItemsService.UpsertItem(ItemDto.ToModel(dto));
                ShowResultService.ShowResultMessage(importResult);
            }
        }

        await ReloadItems();
    }


    async Task ReloadItems() => await OnReload.InvokeAsync();
}