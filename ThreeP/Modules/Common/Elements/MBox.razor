@namespace Mac.Modules.Elements


<MudPaper Elevation="GlobalStyles.Elevation" Class="@ClassBuilder" Style="@StyleBuilder"
          @ondblclick="@(async _ => await OnDoubleClick.InvokeAsync())">
    <MudStack Row Justify="Justify.SpaceBetween">
        <MTitle Name="@Name" Color="@Color" Typo="Typo"/>
        <MudSpacer/>
        @if (HeaderRight is not null)
        {
            @HeaderRight
        }
        @if (!ExpandedDisabled)
        {
            <MudToggleIconButton Disabled="ExpandedDisabled" @bind-Toggled="Expanded"
                                 Icon="@Icons.Material.Filled.ArrowDropUp"
                                 ToggledIcon="@Icons.Material.Filled.ArrowDropDown"/>
        }
    </MudStack>
    <MudCollapse Expanded="Expanded">
        @if (ChildContent is not null)
        {
            @ChildContent
        }
    </MudCollapse>
</MudPaper>


@code {
    [Parameter] public EventCallback OnDoubleClick { get; set; }
    [Parameter] public RenderFragment? HeaderRight { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool ExpandedDisabled { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public Typo Typo { get; set; } = GlobalStyles.HeaderTypo;
    [Parameter] public Color Color { get; set; } = GlobalStyles.TextColor;
    [Parameter] public bool Expanded { get; set; }
    [Parameter] public bool StickyTop { get; set; }
    [Parameter] public string? StickyOffsetTop { get; set; } = "0";
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Styles { get; set; }

    string? ClassBuilder => new CssBuilder()
        .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
        .AddClass("pa-4")
        // .AddClass("mud-appbar-fixed-top")
        .Build();

    string? StyleBuilder => new StyleBuilder()
        .AddStyle($"position: sticky; top:{StickyOffsetTop}; z-index:10", StickyTop)
        .AddStyle(Styles, !string.IsNullOrWhiteSpace(Styles))
        .Build();
}