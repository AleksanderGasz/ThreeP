@namespace Mac.Modules.Crud
@typeparam T where T : BaseModel, new()

<MBox Name="Dodaj/Edytuj" Expanded="expanded" ExpandedDisabled="true" StickyTop StickyOffsetTop="64px"
      OnDoubleClick="@Add">
    <HeaderRight>
        <MudButton Disabled="updateDisabled" Color="Color.Success" Variant="Variant.Filled" Size="Size.Medium"
                   OnClick="Add">Dodaj
        </MudButton>
    </HeaderRight>
    <ChildContent>
        <MudForm @key="titem.item" @ref="@form" Model="titem.item" @bind-IsValid="@success" @bind-Errors="errors">
            
            @ChildContent(titem.item)

            @* BUTTONS *@
            <MudStack Row Justify="Justify.FlexEnd" Class="@GlobalStyles.MarginTop">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel" Class="me-3">Anuluj</MudButton>
                <MudButton Disabled="@(!form.IsValid)" Variant="Variant.Filled" Color="Color.Success" OnClick="Ok">OK
                </MudButton>
            </MudStack>
        </MudForm>
    </ChildContent>
</MBox>

@code {
    [Parameter] public EventCallback<(T? item, bool isNew)> ItemChanged { get; set; }
    [Parameter] public RenderFragment<T>? ChildContent { get; set; }
    [Parameter] public (T? item, bool isNew) Titem { get; set; }
    (T? item, bool isNew) titem;

    string[]? errors;
    bool success;
    MudForm? form;
    // T exist = new();

    // bool isNew { get; set; }
    bool expanded;
    bool updateDisabled;


    protected override void OnParametersSet()
    {

        if (Titem.item is not null)
        {
            var isDiffrent = !ReferenceEquals(Titem.item, titem.item) || Titem.isNew != titem.isNew;
            if (isDiffrent)
            {
                titem = Titem;
                expanded = true;
                updateDisabled = true;
            }
        }
        /*if (Item is null)
        {
            Item=new(){Id=Guid.Empty};
            expanded = false;
            addDisabled = false;
            isNew = false;
            return;
        }

        if (Item.Id!=Guid.Empty&&!isNew)
        {
            expanded = true;
            addDisabled= true;
        }
        else if (!isNew)
        {
            expanded = false;
            addDisabled = false;
        }*/
        
        
        /*Item ??= new(){Id= Guid.Empty};
        if (!ReferenceEquals(exist, Item) && Item.Id != Guid.Empty)
        {
            exist = Item;
            expanded = true;
            addDisabled = true;
        }
        else
        {
            Item = new();
            expanded = false;
        }*/
    }


    /*
    async Task Add()
    {
        Item = new(){Id = Guid.Empty};
        isNew = true;
        expanded = true;
        addDisabled = true;
        
        // exist = Item;
    }
    */
    
    async Task Add()
    {
        titem = (new T{Id = Guid.CreateVersion7()}, true);
        // TItem = (new T{Id = Guid.CreateVersion7()}, true);
        expanded = true;
        updateDisabled = true;
    }


    async Task Ok()
    {
        if (titem.item is null) return;
        
        if (titem.item.Id==Guid.Empty) titem.item.Id=Guid.CreateVersion7();
        
        // exist = Item;
        // await ItemChanged.InvokeAsync(TItem);
        await ItemChanged.InvokeAsync(titem);
        // Item = new();
        // isNew = false;
        expanded = false;
        updateDisabled = false;
    }


    async Task Cancel()
    {
        expanded = false;
        updateDisabled = false;
        titem = default;
        // isNew = false;
        if (form is not null) await form.ResetAsync();
    }
}