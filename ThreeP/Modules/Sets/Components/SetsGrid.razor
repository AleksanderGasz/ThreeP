@namespace ThreeP.Modules.Items
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (Sets is null || !Sets.Any())
{
    <NoData/>
}
else
{
    <MudDataGrid T="Set" Items="Sets" Elevation="GlobalStyles.Elevation" RowClick="Details"
                 ReadOnly="false" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual"
                 CommittedItemChanges="OnCommitItemChanges" CanceledEditingItem="OnCanceledEditingItem"
    >
        <ToolBarContent>
            <MTitle Name="Sety"/>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Set"/>
            <PropertyColumn Property="x => x.Name" Title="Nazwa" Required="false" Editable/>
            <PropertyColumn Property="x => x.Description" Title="Opis" Required="false" Editable/>
            <PropertyColumn Property="x => x.Weight" Title="Waga" Editable="false"/>

            @* ACTIONS *@
            <TemplateColumn StickyRight Title="Akcje" HeaderClass="d-flex justify-center" HeaderStyle="width:120px; "
                            CellStyle="width:120px; text-align:center; ">
                <CellTemplate>
                    @*
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small"
                                   OnClick="@context.Actions.StartEditingItemAsync" Class="me-3"/>
                    *@
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small"
                                   OnClick="()=>Edit(context)" Class="me-3"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                   OnClick="@(e => Delete(context))"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        @* DETAILS *@
        <ChildRowContent>
            @if (context?.Item.Items.Any() == true)
            {
                <MudSimpleTable Elevation="GlobalStyles.Elevation" Hover Dense Style="overflow-x: auto;">
                    <thead>
                    <tr>
                        <th>Nazwa</th>
                        <th>Opis</th>
                        <th>Waga</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in context.Item?.Items)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Description</td>
                            <td>@item.Weight</td>
                        </tr>
                    }
                    </tbody>
                </MudSimpleTable>
            }
        </ChildRowContent>

    </MudDataGrid>
}

@code {
    [Parameter] public EventCallback<Set> OnEdit { get; set; }
    [Parameter] public EventCallback<Guid?> OnDelete { get; set; }
    [Parameter] public List<Set>? Sets { get; set; }


    async Task Edit(CellContext<Set?> context)
    {
        await OnEdit.InvokeAsync(context.Item);
    }


    async Task Delete(CellContext<Set?> context)
    {
        var result = await DialogService.ShowMessageBox("Uwaga!", "Czy na pewno chcesz skasować?", yesText: "Usuń!", cancelText: "Anuluj");
        if (result == true) await OnDelete.InvokeAsync(context.Item.Id);
    }


    async Task OnCommitItemChanges(Set? arg)
    {
        await OnEdit.InvokeAsync(arg);
    }


    void OnCanceledEditingItem(Set? item)
    {
        // ZMIANA: Anulowanie edycji - opcjonalnie można dodać logikę
        StateHasChanged();
    }


    async Task Details(DataGridRowClickEventArgs<Set> context)
    {
        NavigationManager.NavigateTo($"/set-details/{context.Item.Id}", new NavigationOptions { HistoryEntryState = NavigationManager.Uri });
    }
}