@namespace ThreeP.Modules.Trips
@page "/trips"
@inject TripService TripService
@inject SetService SetService
@inject ShowResultService ShowResultService

@* <MTitle Name="Tripy"/> *@

<Update T="Trip" Titem="tItem" ItemChanged="UpdateItem">
    <MudTextField @bind-Value="@context?.Name" Label="Nazwa" Variant="Variant.Outlined" Required Immediate
                  Clearable/>
    <MudTextField @bind-Value="@context?.Description" Label="Opis" Variant="Variant.Outlined" Lines="3" Clearable/>
    <MudDatePicker @bind-Date="@context?.TripDate" Variant="Variant.Outlined" Label="Data wycieczki"/>

    <MudSelect @bind-Value="context?.SetId" Variant="Variant.Filled" Label="Wybierz Set"
               Class="@GlobalStyles.MarginTop" Clearable>
        @* <MudSelectItem Value="sets?.FirstOrDefault().Id">@sets?.FirstOrDefault()?.Name</MudSelectItem> *@
        @foreach (var set in sets)
        {
            <MudSelectItem Value="set?.Id">@set?.Name</MudSelectItem>
        }
    </MudSelect>
</Update>
<MVerticalSpacer/>
<MudGrid>
    @*
        <MudItem xs="12">
            <TripUpdate T="Trip" Item="item" ItemChanged="UpdateItem" />
        </MudItem>
        *@
    <MudItem xs="12">
        <TripGrid T="Trip" Items="Trips" OnEdit="Edit" OnDelete="Delete"/>
    </MudItem>
</MudGrid>
@* <MacVerticalSpacer/> *@

@code {
    [CascadingParameter] public AppState AppState { get; set; }
    Guid userId => AppState.UserId;
    [PersistentState] public List<Trip>? Trips { get; set; } = [];
    [PersistentState] public List<Set>? sets { get; set; } = [];
    (Trip? trip, bool isNew) tItem;


    protected override async Task OnInitializedAsync()
    {
        await GetTrips();
        await GetSets();
    }


    async Task GetTrips() => Trips = await TripService.Get([x => x.Set], [x => x.UserId == userId]);
    async Task GetSets() => sets = (await SetService.Get(filters: [x => x.UserId == userId])).ToList();


    async Task Edit((Trip? trip, bool isNew) arg) => (tItem) = (arg.trip, arg.isNew);


    async Task Delete(Guid? id)
    {
        var result = await TripService.Delete(id);
        ShowResultService.ShowResultMessage(result);
        await GetTrips();
    }


    async Task UpdateItem((Trip? trip, bool isNew) arg)
    {
        if (arg.trip is null) return;
        tItem = arg;
        tItem.trip.UserId = userId;
        var result = await TripService.UpsertTrip(tItem.trip);
        ShowResultService.ShowResultMessage(result);
        await GetTrips();
        tItem = default;
    }
}