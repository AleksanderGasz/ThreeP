@page "/trip-details/{Id:guid}"
@namespace ThreeP.Modules.Trips
@inject TripService TripService
@inject SetService SetService
@inject ShowResultService ShowResultService
@attribute [Authorize]

@if (trip is null)
{
    <NoData/>
}
else
{
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudStack Row>
                <BackArrow/>
                <MTitle Name="@trip?.Name"/>
            </MudStack>
        </MudItem>

        @* WEIGHT *@
        <MudItem xs="12" md="6" Class="d-flex justify-end align-center">
            <MudStack Row>
                <MudText Color="Color.Default" Typo="Typo.h6" Class="me-2">Waga:</MudText>
                <MudText Color="Color.Warning"
                         Typo="Typo.h6">@(set?.Weight.HasValue == true ? $"{set?.Weight} Kg" : string.Empty)</MudText>
            </MudStack>
        </MudItem>

        @* LEFT SIDE *@

        @* DESCRIPTION *@
        <MudItem xs="12" md="6">
            @if (!string.IsNullOrWhiteSpace(trip.Description))
            {
                <MudPaper Elevation="GlobalStyles.Elevation"
                          Class="@GlobalStyles.Padding">
                    <MudText Typo="Typo.caption" Color="Color.Info" HtmlTag="p" Inline="false">Opis</MudText>
                    <MudText Typo="Typo.inherit" Color="Color.Default" HtmlTag="p">@trip.Description</MudText>
                </MudPaper>
            }
        </MudItem>


        @* RIGHT SIDE *@
        <MudItem xs="12" md="6">
            @* CHANGE SET *@
            <MudSelect T="Guid?" Value="trip.SetId" ValueChanged="ChangeSet" Variant="Variant.Outlined"
                       Class="@GlobalStyles.VerticalSpacer">
                @* <MudSelectItem T="Guid?" Value="@((Guid?)null)">--Brak--</MudSelectItem> *@

                @foreach (var set in sets)
                {
                    <MudSelectItem T="Guid?" Value="set?.Id">@set.Name</MudSelectItem>
                }
            </MudSelect>

            @* UPDATE *@
            <ItemUpdate Item="item" ItemChanged="UpdateSet"/>

            <MVerticalSpacer/>
            @if (set is not null)
            {
                <SetItemsGrid Set="set" OnEdit="Edit" OnDelete="(arg)=>DeleteItemFromSet(arg)"/>
            }

        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter] public AppState AppState { get; set; }
    Guid userId => AppState.UserId;
    [Parameter] public Guid Id { get; set; }
    Item? item;
    Trip? trip;
    Set? set;
    List<Set> sets = [];
    bool isItemNew;


    protected override async Task OnInitializedAsync()
    {
        await Get();
        sets = await SetService.Get(filters: [x => x.UserId == userId]);
        await GetSet();
    }


    async Task Get() => trip = await TripService.GetById(Id, [x => x.Set], [x => x.UserId == userId]);


    async Task GetSet() => set = await SetService.GetById(trip?.SetId, [x => x.Items], [x => x.UserId == userId]);
    // async Task GetSet() => set = await SetService.GetById(trip?.SetId, [x => x.SetItems], [x => x.UserId == userId]);


    async Task Edit(Item arg) => item = arg;


    async Task ChangeSet(Guid? arg)
    {
        trip.SetId = arg;
        await GetSet();
        var result = await TripService.UpsertTrip(trip);
        ShowResultService.ShowResultMessage(result);
        await Get();
    }


    async Task UpdateSet((Item? item, bool isNew) arg)
    {
        if (arg.isNew) await AddItemToSet(arg.item);
        else
        {
            /* set.SetItems ??= [];
            var link = set.SetItems.FirstOrDefault(x => x.ItemId == arg.Id);
            if (link is null)
            {
                set.SetItems.Add(new SetItem
                {
                    SetId = set.Id,
                    ItemId = arg.Id,
                });
            }
            else set.SetItems.Remove(link);*/

            set.Items?.Remove(arg.item);
            set.Items?.Add(arg.item);
            set.UserId = userId;
            var result = await SetService.UpdateSet(set);
            // var result = await SetService.UpsertSet(set);
            ShowResultService.ShowResultMessage(result);
            await GetSet();
        }
    }


    async Task AddItemToSet(Item? item)
    {
        item.UserId = userId;
        // item.Sets.Add(set);
        var result = await SetService.AddNewItemToSet(item, set.Id);
        ShowResultService.ShowResultMessage(result);
        await GetSet();
    }


    async Task DeleteItemFromSet(Guid? itemId)
    {
        var result = await SetService.DeleteItemFromSet(itemId.Value, set.Id, userId);
        ShowResultService.ShowResultMessage(result);
        await GetSet();
    }
}