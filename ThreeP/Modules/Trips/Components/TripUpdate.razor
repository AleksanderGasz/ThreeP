@namespace ThreeP.Modules.Trips
@typeparam T where T : Trip, new()
@inject SetService SetService

<div style="text-align: end;">
</div>
<MBox Name="Dodaj/Edytuj" Expanded="expanded">
    <HeaderRight>
        <MudButton Disabled="addDisabled" Color="Color.Success" Variant="Variant.Filled" Size="Size.Medium"
                   OnClick="Add">Dodaj
        </MudButton>
    </HeaderRight>
    <ChildContent>
        <MudForm @ref="@form" Model="Item" @bind-IsValid="@success" @bind-Errors="errors">
            <MudTextField @bind-Value="@Item?.Name" Label="Nazwa" Variant="Variant.Outlined" Required Immediate
                          Clearable/>
            <MudTextField @bind-Value="@Item?.Description" Label="Opis" Variant="Variant.Outlined" Lines="3" Clearable/>

            <MudSelect @bind-Value="Item?.SetId" Variant="Variant.Filled" Label="Wybierz Set"
                       Class="@GlobalStyles.MarginTop" Clearable>
                @* <MudSelectItem Value="sets?.FirstOrDefault().Id">@sets?.FirstOrDefault()?.Name</MudSelectItem> *@
                @foreach (var set in sets)
                {
                    <MudSelectItem Value="set?.Id">@set?.Name</MudSelectItem>
                }
            </MudSelect>
            @* BUTTONS *@
            <MudStack Row Justify="Justify.FlexEnd" Class="@GlobalStyles.MarginTop">
                <MudButton  Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel" Class="me-3">Anuluj</MudButton>
                <MudButton Disabled="@(!form.IsValid)" Variant="Variant.Filled" Color="Color.Success" OnClick="Ok">OK</MudButton>
            </MudStack>
        </MudForm>
    </ChildContent>
</MBox>

@code {
    [CascadingParameter] public AppState AppState { get; set; }
    [Parameter] public EventCallback<T> ItemChanged { get; set; }
    [Parameter] public T? Item { get; set; }
    List<Set> sets = [];
    Guid? userId=>AppState.UserId;

    string[]? errors;
    bool success;
    MudForm? form;
    T? exist = new();

    bool expanded;
    bool addDisabled;


    protected override async Task OnInitializedAsync()
    {
        sets = (await SetService.Get(filters:[x=>x.UserId==userId])).ToList();
    }


    protected override void OnParametersSet()
    {
        Item ??= new();
        if (!ReferenceEquals(exist, Item) && !string.IsNullOrWhiteSpace(Item.Name))
        {
            exist = Item;
            expanded = true;
            addDisabled = true;
        }
        else
        {
            Item = new();
            expanded = false;
        }
    }


    async Task Add()
    {
        addDisabled = true;
        Item = new();
        exist = Item;
        expanded = true;
    }


    async Task Ok()
    {
        exist = Item;
        await ItemChanged.InvokeAsync(Item);
        Item = new();
        expanded = false;
        addDisabled = false;
    }


    async Task Cancel()
    {
        expanded = false;
        addDisabled = false;
        await form.ResetAsync();
    }
}