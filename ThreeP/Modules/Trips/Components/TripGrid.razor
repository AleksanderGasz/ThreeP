@namespace ThreeP.Modules.Trips
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ImportExportService<T> ImportExportService
@inject ShowResultService ShowResultService
@typeparam T where T : Trip

@if (Items?.Any() == false)
{
    <NoData/>
}
else
{
    <MudDataGrid T="T" Items="Items" Elevation="GlobalStyles.Elevation" RowClick="Details" MultiSelection
                 SelectedItems="selectedItems">
        <ToolBarContent>
            <MTitle Name="Tripy"/>
            <MudSpacer/>
            <MudStack Row Spacing="6">
                <MudIconButton Disabled="!Items.Any()" Icon="@Icons.Material.Filled.FileDownload"
                               Variant="Variant.Filled" Color="Color.Info" Size="Size.Small"  OnClick="Import">Import
                </MudIconButton>
                <MudIconButton Disabled="!selectedItems.Any()" Icon="@Icons.Material.Filled.FileUpload"
                               Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick="Export">Export
                </MudIconButton>
            </MudStack>
        </ToolBarContent>
        <Columns>
            @* COLUMS *@
            <SelectColumn T="T"/>
            <HierarchyColumn T="T"/>
            <PropertyColumn Property="x=>x.Name" Title="Nazwa"/>
            <PropertyColumn Property="x=>x.Description" Title="Opis"/>
            <PropertyColumn Property="x=>x.Set.Name" Title="Set"/>
            <TemplateColumn Title="Set (Waga)">
                <CellTemplate>
                    @context.Item.Set?.Name
                    (@context.Item.Set?.Weight kg)
                </CellTemplate>
            </TemplateColumn>
            @* ACTIONS *@
            <TemplateColumn StickyRight Title="Akcje"
                            HeaderClass="d-flex justify-center" HeaderStyle="width:120px; "
                            CellStyle="width:120px; text-align:center; ">
                <CellTemplate>

                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small"
                                   OnClick="@(e => Edit(context))" Class="me-3"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                   OnClick="@(e => Delete(context))"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        @* DETAILS *@
        <ChildRowContent>

        </ChildRowContent>
    </MudDataGrid>
}

@code {
    [Parameter] public EventCallback<T> OnEdit { get; set; }
    [Parameter] public EventCallback<Guid?> OnDelete { get; set; }
    [Parameter] public List<T>? Items { get; set; }
    HashSet<T> selectedItems = [];


    async Task Edit(CellContext<T?> context) => await OnEdit.InvokeAsync(context.Item);


    async Task Delete(CellContext<T?> context)
    {
        var result = await DialogService.ShowMessageBox("Uwaga!", "Czy na pewno chcesz skasować?", yesText: "Usuń!", cancelText: "Anuluj");
        if (result == true) await OnDelete.InvokeAsync(context.Item.Id);
    }


    async Task OnCommit(T? arg) => await OnEdit.InvokeAsync(arg);


    void OnCancelEditing(T? item) => StateHasChanged();


    async Task Details(DataGridRowClickEventArgs<T> context)
    {
        NavigationManager.NavigateTo($"/trip-details/{context.Item.Id}", new NavigationOptions { HistoryEntryState = NavigationManager.Uri });
    }


    async Task Export()
    {
        var result = await ImportExportService.Export(selectedItems.ToList());
        ShowResultService.ShowResultMessage(result);
    }


    async Task Import()
    {
        var result = await ImportExportService.Import();
        ShowResultService.ShowResultMessage(result.ToResult());
        if (result.IsSuccess)
        {
        }
    }
}